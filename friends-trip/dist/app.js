(window.webpackJsonp=window.webpackJsonp||[]).push([[2],{6:function(module,exports,__webpack_require__){"use strict";eval('\n\nObject.defineProperty(exports, "__esModule", {\n  value: true\n});\n\nvar _jquery = __webpack_require__(7);\n\nvar _jquery2 = _interopRequireDefault(_jquery);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar config = {\n  //wsUrl: \'ws://localhost:5000\',\n  wsUrl: "ws://pg-api.azurewebsites.net/api",\n  httpUrl: "//pg-api.azurewebsites.net/api/",\n  //httpUrl: \'http://localhost:5000/api/\',\n  title: "Friends Trip v.0.1",\n  routes: {\n    Login: "login.html",\n    Transactions: "index.html",\n    Report: "report.html"\n  }\n};\n\n//function jsonp(url, callback) {\n//    var callbackName = \'jsonp_callback_\' + Math.round(100000 * Math.random());\n//    window[callbackName] = function(data) {\n//        delete window[callbackName];\n//        document.body.removeChild(script);\n//        callback(data);\n//    };\n\n//    var script = document.createElement(\'script\');\n//    script.src = url + (url.indexOf(\'?\') >= 0 ? \'&\' : \'?\') + \'callback=\' + callbackName;\n//    document.body.appendChild(script);\n//}\n\nvar app = {\n  EmptyRoom: {\n    Id: "",\n    Name: ""\n  },\n\n  context: {\n    Settings: {\n      filterByUserId: ""\n    },\n    CurrentUser: null,\n    CurrentRoom: null,\n    Table: []\n  },\n\n  generateUid: function generateUid() {\n    return "xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g, function (c) {\n      var r = Math.random() * 16 | 0,\n          v = c == "x" ? r : r & 0x3 | 0x8;\n      return v.toString(16);\n    });\n  },\n  ajax: function ajax(actionUrl, data, method, successCallback, errorCallback) {\n    var authKey = app.context.CurrentUser == null ? null : app.context.CurrentUser.AuthToken;\n    var ajaxUrl = config.httpUrl + actionUrl;\n    app.showLoading(true);\n    return _jquery2.default.ajax({\n      type: method,\n      url: ajaxUrl,\n      contentType: "application/json",\n      data: JSON.stringify(data),\n      beforeSend: function beforeSend(request) {\n        request.setRequestHeader("authToken", authKey);\n      },\n      crossDomain: true,\n      cache: false,\n      success: function success(data) {\n        if (successCallback) successCallback(data);\n      },\n      error: function error(data) {\n        app.onError(data);\n      },\n      complete: function complete() {\n        app.showLoading(false);\n        console.log("ajax completed");\n      }\n    });\n  },\n\n\n  // ajax1(actionUrl, data, method, successCallback, errorCallback) {\n  // \t//var ajaxUrl = config.httpUrl + actionUrl;\n  // \tapp.showLoading(true);\n  // \tmethod = method || "POST";\n  // \tvar xhr = new XMLHttpRequest();\n  // \txhr.open(method, config.httpUrl + actionUrl);\n  // \txhr.setRequestHeader("Content-Type", "application/json");\n  // \txhr.onload = function() {\n  // \t\tdocument.getElementById("logs").innerText = "test4";\n  // \t\tapp.showLoading(false);\n  // \t\tif (xhr.status === 200) {\n  // \t\t\tdocument.getElementById("logs").innerText = "test5";\n  // \t\t\tif (successCallback)\n  // \t\t\t\tsuccessCallback(JSON.parse(xhr.responseText));\n  // \t\t} else {\n  // \t\t\tdocument.getElementById("logs").innerText = "test6";\n  // \t\t\tif (errorCallback) errorCallback(xhr);\n  // \t\t\telse app.onError(xhr);\n  // \t\t}\n  // \t};\n  // \txhr.send(JSON.stringify(data));\n  // },\n\n  showLoading: function showLoading(show) {\n    var loading = document.getElementById("loading");\n    if (show) loading.style.display = "block";else loading.style.display = "none";\n  },\n  getFromLocalStorage: function getFromLocalStorage(key) {\n    var data = JSON.parse(window.localStorage.getItem(key));\n    return data || null;\n  },\n  logout: function logout() {\n    window.localStorage.setItem("current-user", null);\n    app.checkAuth(null);\n  },\n  init: function init(_ref) {\n    var onError = _ref.onError;\n\n    this.onError = function (data) {\n      //dunno logid for?\n      //var logId = app.generateUid();\n      console.warn(data, logid);\n      onError(data);\n    };\n    document.title = config.title;\n    app.initContext();\n    app.checkAuth(app.context.CurrentUser);\n\n    //add global loading component\n    var loading = document.createElement("div");\n    document.body.insertBefore(loading, document.body.firstChild);\n    loading.setAttribute("id", "loading");\n    loading.classList.add("loading");\n  },\n  checkAuth: function checkAuth(user) {\n    var curPage = location.pathname.toLowerCase();\n    curPage = curPage.substring(curPage.lastIndexOf("/") + 1);\n    //document.getElementById("logs").innerText = "["+curPage+"]";\n    if (user && curPage == config.routes.Login) location.href = config.routes.Transactions;else if (!user && curPage != config.routes.Login) location.href = config.routes.Login;\n  },\n  initContext: function initContext() {\n    var settings = app.getFromLocalStorage("current-settings");\n    if (settings != null) app.context.Settings = settings;\n\n    var user = app.getFromLocalStorage("current-user");\n    app.context.CurrentUser = user;\n    var room = app.getFromLocalStorage("current-room");\n    if (room == null) app.context.CurrentRoom = app.EmptyRoom;else app.context.CurrentRoom = room;\n  },\n  saveSettings: function saveSettings() {\n    window.localStorage.setItem("current-settings", JSON.stringify(app.context.Settings));\n  },\n  onLoginDone: function onLoginDone(data) {\n    var user = data.data;\n\n    window.localStorage.setItem("current-user", JSON.stringify(user));\n    app.checkAuth(user);\n    //location.href = config.routes.Transactions;\n  },\n  onGetRoomDone: function onGetRoomDone(data) {\n    var room = data.data;\n    window.localStorage.setItem("current-room", JSON.stringify(room));\n  },\n  login: function login(username, password) {\n    app.ajax("auth/login", { username: username, password: password }, "POST", app.onLoginDone);\n  },\n  register: function register(username, password) {\n    app.ajax("auth/register", { username: username, password: password }, "POST", app.onLoginDone);\n  },\n  loadCurrentRoom: function loadCurrentRoom(callback) {\n    return app.ajax("room/status", {}, "POST", function (result) {\n      app.onGetRoomDone(result);\n      callback(result);\n    });\n  }\n};\n\nexports.default = app;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///6\n')}},[[6,1,0]]]);