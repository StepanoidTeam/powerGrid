(window.webpackJsonp=window.webpackJsonp||[]).push([[2],{7:function(module,exports,__webpack_require__){"use strict";eval('\n\nObject.defineProperty(exports, "__esModule", {\n  value: true\n});\nvar config = {\n  httpUrl: "//pg-api.azurewebsites.net/api/",\n  //httpUrl: \'http://localhost:5000/api/\',\n\n  routes: {\n    Login: "login.html",\n    Transactions: "index.html",\n    Report: "report.html"\n  }\n};\n\nvar app = {\n  EmptyRoom: {\n    Id: "",\n    Name: ""\n  },\n\n  context: {\n    Settings: {\n      filterByUserId: ""\n    },\n    CurrentUser: null,\n    CurrentRoom: null,\n    Table: []\n  },\n\n  LS: {\n    Keys: {\n      SETTINGS: "current-settings",\n      USER: "current-user",\n      ROOM: "current-room"\n    },\n    get: function get(key) {\n      var valueRaw = window.localStorage.getItem(key);\n      var value = JSON.parse(valueRaw);\n      return value || null;\n    },\n    set: function set(key, value) {\n      var valueRaw = JSON.stringify(value);\n      window.localStorage.setItem(key, valueRaw);\n    }\n  },\n\n  init: function init(_ref) {\n    var onError = _ref.onError,\n        onLoading = _ref.onLoading;\n\n    this.onError = function (data) {\n      console.log(data);\n      onError(data);\n    };\n    this.onLoading = onLoading;\n\n    app.initContext();\n    app.checkAuth(app.context.CurrentUser);\n  },\n  ajax: function ajax(actionUrl) {\n    var _this = this;\n\n    var data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    var method = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "POST";\n\n    var authKey = app.context.CurrentUser == null ? null : app.context.CurrentUser.AuthToken;\n\n    var ajaxUrl = config.httpUrl + actionUrl;\n    var body = JSON.stringify(data);\n\n    app.onLoading(true);\n\n    return fetch(ajaxUrl, {\n      method: method,\n      body: body,\n      headers: {\n        authToken: authKey,\n        "Content-Type": "application/json"\n      },\n      mode: "cors",\n      cache: "no-cache"\n    }).then(function (response) {\n      if (response.ok) {\n        return response.json();\n      }\n      throw response;\n    }).catch(function (data) {\n      console.log("fetch err", data);\n      if (data.status === 401) {\n        _this.logout();\n      }\n      app.onError(data);\n    }).finally(function () {\n      return app.onLoading(false);\n    });\n  },\n  logout: function logout() {\n    app.LS.set(app.LS.Keys.USER, null);\n    app.checkAuth(null);\n  },\n  checkAuth: function checkAuth(user) {\n    var curPage = location.pathname.toLowerCase();\n    curPage = curPage.substring(curPage.lastIndexOf("/") + 1);\n\n    if (user && curPage == config.routes.Login) location.href = config.routes.Transactions;else if (!user && curPage != config.routes.Login) location.href = config.routes.Login;\n  },\n  initContext: function initContext() {\n    var settings = app.LS.get(app.LS.Keys.SETTINGS);\n    if (settings != null) app.context.Settings = settings;\n\n    var user = app.LS.get(app.LS.Keys.USER);\n    app.context.CurrentUser = user;\n    var room = app.LS.get(app.LS.Keys.ROOM);\n    if (room == null) app.context.CurrentRoom = app.EmptyRoom;else app.context.CurrentRoom = room;\n  },\n  saveSettings: function saveSettings() {\n    app.LS.set(app.LS.Keys.SETTINGS, app.context.Settings);\n  },\n  onLoginDone: function onLoginDone(data) {\n    var user = data.data;\n\n    app.LS.set(app.LS.Keys.USER, user);\n    app.checkAuth(user);\n    //location.href = config.routes.Transactions;\n  },\n  login: function login(username, password) {\n    app.ajax("auth/login", { username: username, password: password }).then(app.onLoginDone);\n  },\n  register: function register(username, password) {\n    app.ajax("auth/register", { username: username, password: password }).then(app.onLoginDone);\n  },\n  loadCurrentRoom: function loadCurrentRoom() {\n    return app.ajax("room/status").then(function (result) {\n      var room = result.data;\n      app.LS.set(app.LS.Keys.ROOM, room);\n    });\n  }\n};\n\nexports.default = app;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///7\n')}},[[7,0]]]);